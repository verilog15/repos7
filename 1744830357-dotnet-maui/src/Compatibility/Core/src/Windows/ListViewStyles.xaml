<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:winui="using:Microsoft.UI.Xaml.Controls"
    xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,4)"
    xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives"
    xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)"
    xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)"
    xmlns:primitiveContract7Present="using:Microsoft.UI.Xaml.Controls.Primitives?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)"
    xmlns:xf="using:Microsoft.Maui.Controls.Platform"
	xmlns:uwp="using:Microsoft.Maui.Controls.Compatibility.Platform.UWP">


    <uwp:ListViewGroupStyleSelector x:Key="CompatibilityListViewGroupSelector" />

    <DataTemplate x:Key="CompatibilityListViewGroupTemplate">
        <TextBlock Text="{Binding}" Style="{ThemeResource BaseTextBlockStyle}" />
    </DataTemplate>
    <DataTemplate x:Key="CompatibilityCellTemplate">
        <uwp:CellControl HorizontalContentAlignment="Stretch" Height="{Binding Cell.RenderHeight,RelativeSource={RelativeSource Mode=Self},Converter={StaticResource HeightConverter}}" />
    </DataTemplate>
    
    <GroupStyle x:Key="CompatibilityListViewGroup" HidesIfEmpty="False">
        <GroupStyle.HeaderContainerStyle>
            <Style TargetType="ListViewHeaderItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <uwp:ListGroupHeaderPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </GroupStyle.HeaderContainerStyle>
        <GroupStyle.HeaderTemplate>
            <DataTemplate>
                <uwp:CellControl IsGroupHeader="true" HorizontalContentAlignment="Stretch" />
            </DataTemplate>
        </GroupStyle.HeaderTemplate>
    </GroupStyle>

    <DataTemplate x:Key="CompatibilityViewCell">
        <ContentControl DataContext="{Binding Cell}">
            <ContentPresenter Height="{Binding RenderHeight, Converter={StaticResource HeightConverter}}" Content="{Binding View, Converter={StaticResource ViewToRenderer}}" />
        </ContentControl>
    </DataTemplate>

    <DataTemplate x:Key="CompatibilityTextCell">
        <StackPanel AutomationProperties.AutomationId="{Binding AutomationId}">
            <TextBlock
				Text="{Binding Text}"
				Style="{ThemeResource BaseTextBlockStyle}"
				Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
				Foreground="{Binding TextColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}" />

            <TextBlock
				Text="{Binding Detail}"
				Style="{ThemeResource BodyTextBlockStyle}"
				Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
				Foreground="{Binding DetailColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}"
				x:Name="detail"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="CompatibilityListViewHeaderTextCell">
        <StackPanel>
            <TextBlock
				Text="{Binding Text}"
				Style="{ThemeResource SubheaderTextBlockStyle}"
				Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
				Foreground="{Binding TextColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}" />

            <TextBlock
				Text="{Binding Detail}"
				Style="{ThemeResource BodyTextBlockStyle}"
				Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
				Foreground="{Binding DetailColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}"
				x:Name="detail" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="CompatibilityImageCell">
        <Grid AutomationProperties.AutomationId="{Binding AutomationId}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Image Grid.Column="0" Grid.RowSpan="2"
				DataContext="{Binding ImageSource, Converter={StaticResource ImageConverter}}"
				Source="{Binding Value}"
				VerticalAlignment="Center" />

            <TextBlock Grid.Column="1" Grid.Row="0"
				Text="{Binding Text}"
				Style="{ThemeResource BaseTextBlockStyle}"
				Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
				Foreground="{Binding TextColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}" />

            <TextBlock Grid.Column="1" Grid.Row="1"
				Text="{Binding Detail}"
				Style="{ThemeResource BodyTextBlockStyle}"
				Visibility="{Binding Text,RelativeSource={RelativeSource Self}, Converter={StaticResource CollapseWhenEmpty}}"
				Foreground="{Binding DetailColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}"
				x:Name="detail" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="CompatibilitySwitchCell">
        <Grid HorizontalAlignment="Stretch" x:Name="ParentGrid"  AutomationProperties.AutomationId="{Binding AutomationId}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Column="0" Text="{Binding Text}" VerticalAlignment="Center" Style="{ThemeResource BaseTextBlockStyle}" />

            <ToggleSwitch Grid.Column="1" IsOn="{Binding On, Mode=TwoWay}" OnContent="" OffContent="" VerticalAlignment="Center" FlowDirection="{Binding FlowDirection, ElementName=ParentGrid }" IsEnabled="{Binding IsEnabled}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="CompatibilityEntryCell">
        <uwp:EntryCellTextBox  AutomationProperties.AutomationId="{Binding AutomationId}" IsEnabled="{Binding IsEnabled}" Header="{Binding}" Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextAlignment="{Binding HorizontalTextAlignment,Converter={StaticResource HorizontalTextAlignmentConverter}}" PlaceholderText="{Binding Placeholder}"  InputScope="{Binding Keyboard,Converter={StaticResource KeyboardConverter}}" HorizontalAlignment="Stretch">
            <uwp:EntryCellTextBox.HeaderTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Label}" IsHitTestVisible="False" Style="{ThemeResource BaseTextBlockStyle}" Foreground="{Binding LabelColor, Converter={StaticResource ColorConverter}, ConverterParameter=DefaultTextForegroundThemeBrush}" />
                </DataTemplate>
            </uwp:EntryCellTextBox.HeaderTemplate>
        </uwp:EntryCellTextBox>
    </DataTemplate>

    <Style x:Key="CompatibilityFormsListViewItem" TargetType="ListViewItem">
        <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
        <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
        <Setter Property="TabNavigation" Value="Local" />
        <Setter Property="IsHoldingEnabled" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <ListViewItemPresenter
						CheckBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}"
						ContentMargin="{TemplateBinding Padding}"
						CheckMode="Inline"
						ContentTransitions="{TemplateBinding ContentTransitions}"
						CheckBoxBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}"
						DragForeground="{ThemeResource ListViewItemDragForegroundThemeBrush}"
						DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}"
						DragBackground="{ThemeResource ListViewItemDragBackgroundThemeBrush}"
						DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}"
						FocusBorderBrush="{ThemeResource SystemControlForegroundAltHighBrush}"
						FocusSecondaryBorderBrush="{ThemeResource SystemControlForegroundBaseHighBrush}"
						HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						PointerOverForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}"
						PressedBackground="{ThemeResource SystemControlHighlightListMediumBrush}"
						PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}"
						PointerOverBackground="{ThemeResource SystemControlHighlightListLowBrush}"
						ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}"
						SelectedPressedBackground="{ThemeResource SystemControlHighlightListAccentHighBrush}"
						SelectionCheckMarkVisualEnabled="True"
						SelectedForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}"
						SelectedPointerOverBackground="{ThemeResource SystemControlHighlightListAccentMediumBrush}"
						SelectedBackground="{ThemeResource SystemControlHighlightListAccentLowBrush}"
						VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
