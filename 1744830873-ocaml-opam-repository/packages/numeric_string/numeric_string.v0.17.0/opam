opam-version: "2.0"
maintainer: "Jane Street developers"
authors: ["Jane Street Group, LLC"]
homepage: "https://github.com/janestreet/numeric_string"
bug-reports: "https://github.com/janestreet/numeric_string/issues"
dev-repo: "git+https://github.com/janestreet/numeric_string.git"
doc: "https://ocaml.janestreet.com/ocaml-core/latest/doc/numeric_string/index.html"
license: "MIT"
build: [
  ["dune" "build" "-p" name "-j" jobs]
]
depends: [
  "ocaml"    {>= "5.1.0"}
  "base"     {>= "v0.17" & < "v0.18"}
  "ppx_jane" {>= "v0.17" & < "v0.18"}
  "dune"     {>= "3.11.0"}
]
available: arch != "arm32" & arch != "x86_32"
synopsis: "A comparison function for strings that sorts numeric fragments of strings according to their numeric value, so that e.g. \"abc2\" < \"abc10\"."
description: "
A comparison function (and assorted sets / maps / etc.) for strings
that sorts numeric fragments of strings according to their numeric
value, so that e.g. \"abc2\" < \"abc10\".

People often call this \"natural sort\", and link to this:

https://blog.codinghorror.com/sorting-for-humans-natural-sort-order/

which links to a few other posts about the matter. Sometimes it's
called \"alphanum sort\" or \"human sort\" or something. \"Numeric string
compare\" is chosen as the name that gets closest to expressing what it
actually does (to me, \"natural sort\" sounds like something that might
include a different treatment of case, special handling of whitespace
or punctuation, etc.)
"
url {
src: "https://github.com/janestreet/numeric_string/archive/refs/tags/v0.17.0.tar.gz"
checksum: "sha256=d3c552957dd6e2b0791d5db4a9a50ec28eed60c2009acd46f9ecfd6891c2fe0f"
}
